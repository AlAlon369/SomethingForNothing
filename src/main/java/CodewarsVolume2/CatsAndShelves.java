package CodewarsVolume2;

public class CatsAndShelves {
  public static void main(String[] args) {
    System.out.println(Kata.solution(1, 5));
    System.out.println(Kata.solution(1, 8));
    System.out.println(Kata.solution(3, 3));
    System.out.println(Kata.solution(2, 9));
  }

  // План
  // Анализ требований и ограничений:
  // Начать с начальной полки start, завершить на полке finish.
  // Разрешенные прыжки: на 1 или 3 полки.
  // Нужно найти минимальное количество прыжков.
  // Вычислить разницу между полкой finish и start, назовем ее distance.
  // Оптимизировать прыжки, отдавая предпочтение прыжкам на 3 полки (максимально длинный шаг).
  // В случае оставшейся дистанции, которая не делится на 3, добавить минимально необходимое количество прыжков на 1 полку.
  // Найти количество прыжков на 3 полки: jumpsOf3 = distance / 3.
  // Вычислить остаток после прыжков на 3: remaining = distance
  // Если остаток > 0, то добавить столько прыжков на 1, сколько нужно для достижения финишной полки.
  // Сумма прыжков на 3 и 1 — это результат.
  // Проверка корректности и предельных случаев:
  // Если start == finish, то количество прыжков равно 0.
  // Если разница меньше 3, проверить минимально допустимое количество прыжков.
  // Убедиться, что результат работает для любых положительных входных данных.

  public static class Kata {
    public static int solution(int start, int finish) {
      // Разница между стартовой и конечной полками
      int distance = finish - start;
      // Количество прыжков на 3 полки
      int jumpsOf3 = distance / 3;
      // Остаток после прыжков на 3 полки
      int remaining = distance % 3;
      // Общее количество прыжков — это сумма прыжков на 3 и оставшихся
      return jumpsOf3 + remaining;
    }
  }
}